{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef } from 'react';\nimport { Box } from '../Box';\nvar XAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var chartProps = _ref.chartProps,\n      pad = _ref.pad,\n      renderValue = _ref.renderValue,\n      serie = _ref.serie; // pull the x-axis values from the first chart, all should have the same\n\n  var _axis = (Array.isArray(chartProps[0]) ? chartProps[0][0] : chartProps[0]).axis,\n      axisValues = _axis[0]; // When there are only labels at the end of the axis, let them take as much\n  // space as they like. If there are more, align their container to the\n  // data/guide lines and then let their content overflow that.\n\n  var itemProps = axisValues.length === 2 ? {} : {\n    width: '1px',\n    overflow: 'visible',\n    align: 'center'\n  };\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"xAxis\",\n    direction: \"row\",\n    justify: \"between\",\n    pad: pad != null && pad.horizontal ? {\n      horizontal: pad.horizontal\n    } : undefined\n  }, axisValues.map(function (dataIndex, i) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(Box, _extends({\n        key: i\n      }, itemProps), serie ? renderValue(serie, dataIndex) : dataIndex)\n    );\n  }));\n});\nexport { XAxis };","map":{"version":3,"sources":["C:/Personal-Portfolio/node_modules/grommet/es6/components/DataChart/XAxis.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","forwardRef","Box","XAxis","_ref","ref","chartProps","pad","renderValue","serie","_axis","Array","isArray","axis","axisValues","itemProps","width","overflow","align","createElement","gridArea","direction","justify","horizontal","undefined","map","dataIndex"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;;AAE7T,OAAOQ,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,IAAIC,KAAK,GAAG,aAAaF,UAAU,CAAC,UAAUG,IAAV,EAAgBC,GAAhB,EAAqB;AACvD,MAAIC,UAAU,GAAGF,IAAI,CAACE,UAAtB;AAAA,MACIC,GAAG,GAAGH,IAAI,CAACG,GADf;AAAA,MAEIC,WAAW,GAAGJ,IAAI,CAACI,WAFvB;AAAA,MAGIC,KAAK,GAAGL,IAAI,CAACK,KAHjB,CADuD,CAKvD;;AACA,MAAIC,KAAK,GAAG,CAACC,KAAK,CAACC,OAAN,CAAcN,UAAU,CAAC,CAAD,CAAxB,IAA+BA,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,CAA/B,GAAkDA,UAAU,CAAC,CAAD,CAA7D,EAAkEO,IAA9E;AAAA,MACIC,UAAU,GAAGJ,KAAK,CAAC,CAAD,CADtB,CANuD,CAO5B;AAC3B;AACA;;AAEA,MAAIK,SAAS,GAAGD,UAAU,CAACrB,MAAX,KAAsB,CAAtB,GAA0B,EAA1B,GAA+B;AAC7CuB,IAAAA,KAAK,EAAE,KADsC;AAE7CC,IAAAA,QAAQ,EAAE,SAFmC;AAG7CC,IAAAA,KAAK,EAAE;AAHsC,GAA/C;AAKA,SAAO,aAAalB,KAAK,CAACmB,aAAN,CAAoBjB,GAApB,EAAyB;AAC3CG,IAAAA,GAAG,EAAEA,GADsC;AAE3Ce,IAAAA,QAAQ,EAAE,OAFiC;AAG3CC,IAAAA,SAAS,EAAE,KAHgC;AAI3CC,IAAAA,OAAO,EAAE,SAJkC;AAK3Cf,IAAAA,GAAG,EAAEA,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACgB,UAAnB,GAAgC;AACnCA,MAAAA,UAAU,EAAEhB,GAAG,CAACgB;AADmB,KAAhC,GAEDC;AAPuC,GAAzB,EAQjBV,UAAU,CAACW,GAAX,CAAe,UAAUC,SAAV,EAAqBnC,CAArB,EAAwB;AACxC;AACE;AACA;AACAS,MAAAA,KAAK,CAACmB,aAAN,CAAoBjB,GAApB,EAAyBf,QAAQ,CAAC;AAChCQ,QAAAA,GAAG,EAAEJ;AAD2B,OAAD,EAE9BwB,SAF8B,CAAjC,EAEeN,KAAK,GAAGD,WAAW,CAACC,KAAD,EAAQiB,SAAR,CAAd,GAAmCA,SAFvD;AAHF;AAOD,GARE,CARiB,CAApB;AAiBD,CAjCkC,CAAnC;AAkCA,SAASvB,KAAT","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { forwardRef } from 'react';\nimport { Box } from '../Box';\nvar XAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var chartProps = _ref.chartProps,\n      pad = _ref.pad,\n      renderValue = _ref.renderValue,\n      serie = _ref.serie;\n  // pull the x-axis values from the first chart, all should have the same\n  var _axis = (Array.isArray(chartProps[0]) ? chartProps[0][0] : chartProps[0]).axis,\n      axisValues = _axis[0]; // When there are only labels at the end of the axis, let them take as much\n  // space as they like. If there are more, align their container to the\n  // data/guide lines and then let their content overflow that.\n\n  var itemProps = axisValues.length === 2 ? {} : {\n    width: '1px',\n    overflow: 'visible',\n    align: 'center'\n  };\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"xAxis\",\n    direction: \"row\",\n    justify: \"between\",\n    pad: pad != null && pad.horizontal ? {\n      horizontal: pad.horizontal\n    } : undefined\n  }, axisValues.map(function (dataIndex, i) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(Box, _extends({\n        key: i\n      }, itemProps), serie ? renderValue(serie, dataIndex) : dataIndex)\n    );\n  }));\n});\nexport { XAxis };"]},"metadata":{},"sourceType":"module"}